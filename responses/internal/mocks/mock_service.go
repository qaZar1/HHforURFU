// Code generated by MockGen. DO NOT EDIT.
// Source: responses/internal/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	autogen "github.com/qaZar1/HHforURFU/responses/autogen"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// AddResponses mocks base method.
func (m *MockServiceInterface) AddResponses(response autogen.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResponses", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResponses indicates an expected call of AddResponses.
func (mr *MockServiceInterfaceMockRecorder) AddResponses(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponses", reflect.TypeOf((*MockServiceInterface)(nil).AddResponses), response)
}

// GetAllResponses mocks base method.
func (m *MockServiceInterface) GetAllResponses() ([]autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResponses")
	ret0, _ := ret[0].([]autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResponses indicates an expected call of GetAllResponses.
func (mr *MockServiceInterfaceMockRecorder) GetAllResponses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResponses", reflect.TypeOf((*MockServiceInterface)(nil).GetAllResponses))
}

// GetResponsesByChatID mocks base method.
func (m *MockServiceInterface) GetResponsesByChatID(chatId int64) ([]autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByChatID", chatId)
	ret0, _ := ret[0].([]autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByChatID indicates an expected call of GetResponsesByChatID.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByChatID(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByChatID", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByChatID), chatId)
}

// GetResponsesByChatIDEmployer mocks base method.
func (m *MockServiceInterface) GetResponsesByChatIDEmployer(chatIdEmployer int64) ([]autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByChatIDEmployer", chatIdEmployer)
	ret0, _ := ret[0].([]autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByChatIDEmployer indicates an expected call of GetResponsesByChatIDEmployer.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByChatIDEmployer(chatIdEmployer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByChatIDEmployer", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByChatIDEmployer), chatIdEmployer)
}

// GetResponsesByVacancyID mocks base method.
func (m *MockServiceInterface) GetResponsesByVacancyID(vacancyId int64) ([]autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByVacancyID", vacancyId)
	ret0, _ := ret[0].([]autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByVacancyID indicates an expected call of GetResponsesByVacancyID.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByVacancyID(vacancyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByVacancyID", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByVacancyID), vacancyId)
}

// GetResponsesByVacancyIDAndChatID mocks base method.
func (m *MockServiceInterface) GetResponsesByVacancyIDAndChatID(vacancyId, chatId int64) (*autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByVacancyIDAndChatID", vacancyId, chatId)
	ret0, _ := ret[0].(*autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByVacancyIDAndChatID indicates an expected call of GetResponsesByVacancyIDAndChatID.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByVacancyIDAndChatID(vacancyId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByVacancyIDAndChatID", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByVacancyIDAndChatID), vacancyId, chatId)
}

// GetResponsesByVacancyIDAndChatIDEmployer mocks base method.
func (m *MockServiceInterface) GetResponsesByVacancyIDAndChatIDEmployer(vacancyId, chatIdEmployer int64) (*autogen.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponsesByVacancyIDAndChatIDEmployer", vacancyId, chatIdEmployer)
	ret0, _ := ret[0].(*autogen.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponsesByVacancyIDAndChatIDEmployer indicates an expected call of GetResponsesByVacancyIDAndChatIDEmployer.
func (mr *MockServiceInterfaceMockRecorder) GetResponsesByVacancyIDAndChatIDEmployer(vacancyId, chatIdEmployer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponsesByVacancyIDAndChatIDEmployer", reflect.TypeOf((*MockServiceInterface)(nil).GetResponsesByVacancyIDAndChatIDEmployer), vacancyId, chatIdEmployer)
}

// RemoveResponses mocks base method.
func (m *MockServiceInterface) RemoveResponses(vacancyId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResponses", vacancyId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveResponses indicates an expected call of RemoveResponses.
func (mr *MockServiceInterfaceMockRecorder) RemoveResponses(vacancyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResponses", reflect.TypeOf((*MockServiceInterface)(nil).RemoveResponses), vacancyId)
}

// UpdateRespons mocks base method.
func (m *MockServiceInterface) UpdateRespons(vacancyId int64, updateResponse autogen.Response) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRespons", vacancyId, updateResponse)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRespons indicates an expected call of UpdateRespons.
func (mr *MockServiceInterfaceMockRecorder) UpdateRespons(vacancyId, updateResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespons", reflect.TypeOf((*MockServiceInterface)(nil).UpdateRespons), vacancyId, updateResponse)
}
